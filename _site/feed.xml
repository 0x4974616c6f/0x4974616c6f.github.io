<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-03T00:59:42-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ItaloCobainsBlog</title><subtitle>Bem-vindo ao nosso blog, um espaço dedicado à exploração do fascinante mundo da programação, tecnologia, hacking ético e ciência da computação. Mergulhe conosco em uma jornada repleta de insights e novidades, enquanto compartilhamos nosso conhecimento e paixão por esses campos em constante evolução.</subtitle><entry><title type="html">Entendendo o Buffer Overflow: Conceitos e Exemplos</title><link href="http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/bufferoverflow/2023/05/02/Entendendo-o-Buffer-Overflow.html" rel="alternate" type="text/html" title="Entendendo o Buffer Overflow: Conceitos e Exemplos" /><published>2023-05-02T22:48:46-03:00</published><updated>2023-05-02T22:48:46-03:00</updated><id>http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/bufferoverflow/2023/05/02/Entendendo-o-Buffer-Overflow</id><content type="html" xml:base="http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/bufferoverflow/2023/05/02/Entendendo-o-Buffer-Overflow.html"><![CDATA[<p>Olá! Neste post, vamos discutir o conceito de <strong>buffer overflow</strong> e ver alguns exemplos que ilustram essa vulnerabilidade comum em programas de computador. Vamos aprender sobre as causas desse problema, como explorá-lo e como evitá-lo.</p>

<h2 id="o-que-é-buffer-overflow">O que é Buffer Overflow?</h2>

<p>Buffer overflow é uma vulnerabilidade que ocorre quando um programa tenta escrever mais dados em um buffer do que ele foi projetado para armazenar. Isso pode resultar em comportamento imprevisível, como a corrupção de dados adjacentes na memória, travamento do programa ou, em casos mais sérios, a execução de código malicioso.</p>

<h2 id="por-que-isso-acontece">Por que isso acontece?</h2>

<p>Muitas vezes, buffer overflows ocorrem devido à falta de validação de entrada ou ao uso de funções inseguras que não verificam o tamanho do buffer. Linguagens de programação de baixo nível, como C e C++, são particularmente vulneráveis a buffer overflows, pois não possuem verificações automáticas de limites de buffer.</p>

<h2 id="exemplo-de-buffer-overflow">Exemplo de Buffer Overflow</h2>

<p>Vamos analisar um exemplo simples de buffer overflow em C:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">vulnerable_function</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Uso: %s &lt;input_string&gt;</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">vulnerable_function</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Neste exemplo, a função <code class="language-plaintext highlighter-rouge">vulnerable_function</code> usa a função <code class="language-plaintext highlighter-rouge">strcpy</code> para copiar a string de entrada para um buffer de tamanho fixo. No entanto, <code class="language-plaintext highlighter-rouge">strcpy</code> não verifica o tamanho do buffer e pode causar um overflow se a string de entrada for maior que o tamanho do buffer.</p>

<h2 id="como-explorar-e-evitar-buffer-overflows">Como explorar e evitar Buffer Overflows</h2>

<p>Os atacantes podem explorar buffer overflows para injetar e executar código malicioso, causar a negação de serviço ou ganhar acesso não autorizado a sistemas. Existem várias técnicas para explorar buffer overflows, como o <a href="https://en.wikipedia.org/wiki/Return-to-libc_attack">Return-to-libc</a> e o <a href="https://en.wikipedia.org/wiki/Return-oriented_programming">ROP (Return-oriented programming)</a>.</p>

<p>Para evitar buffer overflows, os desenvolvedores podem adotar as seguintes práticas:</p>

<ol>
  <li><strong>Validar a entrada do usuário</strong>: Sempre valide o tamanho e o conteúdo das entradas do usuário antes de processá-las.</li>
  <li><strong>Usar funções seguras</strong>: Evite usar funções inseguras que não verificam o tamanho do buffer, como <code class="language-plaintext highlighter-rouge">strcpy</code>, <code class="language-plaintext highlighter-rouge">gets</code> e <code class="language-plaintext highlighter-rouge">sprintf</code>. Em vez disso, use funções seguras, como <code class="language-plaintext highlighter-rouge">strncpy</code>, <code class="language-plaintext highlighter-rouge">fgets</code> e <code class="language-plaintext highlighter-rouge">snprintf</code>.</li>
  <li><strong>Habilitar proteções de compilador</strong>: Ative proteções como <a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">ASLR (Address Space Layout Randomization)</a> e <a href="https://en.wikipedia.org/wiki/Data_Execution_Prevention">DEP (Data Execution Prevention)</a> para dificultar a exploração de buffer overflows.</li>
</ol>

<p>Espero que este post tenha ajudado a entender melhor o conceito de buffer overflow, suas causas e como evitá-lo. Ao seguir as práticas recomendadas, você pode minimizar as chances de introduzir vulnerabilidades de buffer overflow em seu código e proteger seus programas contra ataques maliciosos.</p>]]></content><author><name></name></author><category term="Segurança" /><category term="Programação" /><category term="Vulnerabilidades" /><category term="BufferOverflow" /><summary type="html"><![CDATA[Olá! Neste post, vamos discutir o conceito de buffer overflow e ver alguns exemplos que ilustram essa vulnerabilidade comum em programas de computador. Vamos aprender sobre as causas desse problema, como explorá-lo e como evitá-lo.]]></summary></entry><entry><title type="html">Bem vindo ao blog do ItaloCobains</title><link href="http://localhost:4000/programa%C3%A7%C3%A3o/inicio/web/baixo/nivel/2023/05/02/Bem-vindo-ao-blog-do-ItaloCobains.html" rel="alternate" type="text/html" title="Bem vindo ao blog do ItaloCobains" /><published>2023-05-02T21:48:46-03:00</published><updated>2023-05-02T21:48:46-03:00</updated><id>http://localhost:4000/programa%C3%A7%C3%A3o/inicio/web/baixo/nivel/2023/05/02/Bem-vindo-ao-blog-do-ItaloCobains</id><content type="html" xml:base="http://localhost:4000/programa%C3%A7%C3%A3o/inicio/web/baixo/nivel/2023/05/02/Bem-vindo-ao-blog-do-ItaloCobains.html"><![CDATA[<p>Olá! Meu nome é <strong>Italo Brito Brandão</strong>, mas sou mais conhecido na comunidade como <em>ItaloCobains</em>. Comecei a aprender a programar aos 16 anos, usando o Visualg. Sempre gostei de criar algoritmos e enfrentar desafios. Depois de um tempo, comecei a aprender sobre desenvolvimento web, estudando HTML e CSS, o que me proporcionou uma base sólida para aprender frameworks mais adiante.</p>

<p>Embora o próximo passo lógico fosse aprender JavaScript, decidi mudar um pouco e aprender uma linguagem de programação consolidada: Python. Após um ano programando em Python, busquei algo mais desafiador e mergulhei no mundo da linguagem C. Foi um processo difícil, e cheguei a odiar a linguagem C por um tempo. No entanto, conforme fui aprendendo mais sobre ciência da computação, a linguagem C começou a fazer sentido para mim.</p>

<p>Com o tempo, voltei para o desenvolvimento web e finalmente aprendi JavaScript. Assim, fui me aprofundando em frameworks e bibliotecas como React, Next.js e outros, tornando-me um desenvolvedor Full Stack. Depois de dominar o desenvolvimento web, retomei o estudo de programação de baixo nível.</p>

<p>Li livros como <em>“Programação em Baixo Nível: C, Assembly e Execução de Programas na Arquitetura Intel 64”</em> de Igor Zhirkov e <em>“Código Limpo”</em>, muito conhecido na comunidade. Ao mesmo tempo, comecei a estudar processos de memória e, como teste, hackeava a memória de jogos antigos para entender como ela funcionava e como os desenvolvedores de jogos organizavam a memória.</p>

<p>Atualmente, trabalho em um projeto open source de uma linguagem de programação em português chamada <a href="https://github.com/DesignLiquido/delegua">Delegua</a> e desenvolvo softwares para empresas da minha cidade. Eu amo programar e estou animado para compartilhar minha jornada e conhecimento neste blog!</p>]]></content><author><name></name></author><category term="Programação" /><category term="Inicio" /><category term="Web" /><category term="Baixo" /><category term="Nivel" /><summary type="html"><![CDATA[Olá! Meu nome é Italo Brito Brandão, mas sou mais conhecido na comunidade como ItaloCobains. Comecei a aprender a programar aos 16 anos, usando o Visualg. Sempre gostei de criar algoritmos e enfrentar desafios. Depois de um tempo, comecei a aprender sobre desenvolvimento web, estudando HTML e CSS, o que me proporcionou uma base sólida para aprender frameworks mais adiante.]]></summary></entry></feed>